module api {
    typedef octet byteArray[4*1024];
    struct FileMeta {
        string file_path;
        boolean is_new;
        long writing_cookie;
        long file_size;
        long block_num;
        long block_data_node[1000];
        long block_id[1000];
        string creat_time;
        string modify_time;
        string access_time;
    };
    struct ByteArrayWithLength{
        byteArray bytes;
        long byteNum;
    };
    interface DataNode {
        // from Client
        ByteArrayWithLength read(in long block_id);
        boolean append(in long block_id, in ByteArrayWithLength byteArray, in string file_path);
        //long randomBlockId();

        // from NameNode
        long check_free_size();
        long alloc();
        boolean free(in long block_id);
    };
    interface NameNode {
        // from Client
        FileMeta open(in string file_path, in long mode);
        boolean close(in string file_path, in long writing_cookie);
        // 目录操作
        boolean mk_dir(in string dir_path);
        boolean del_dir(in string dir_path);
        boolean change_dir(in string old_dir_path,in string new_dir_path);
        boolean rename_dir(in string old_dir_path,in string new_dir_name);
        // 文件操作
        boolean mk_file(in string file_path);
        boolean del_file(in string file_path);
        boolean change_file(in string old_file_path,in string new_file_path);
        boolean rename_file(in string old_file_path,in string new_file_name);

        // from DataNode
        boolean file_increase(in string file_path, in ByteArrayWithLength byteArray, in long block_data_node, in long block_id, in boolean have_free);
    };
};
